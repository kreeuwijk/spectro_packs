# ovnkube-node-dpu
# daemonset version 3
# starts node daemons for ovn, each in a separate container
# it is run on all nodes
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: ovnkube-node-dpu
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/description: |
      This DaemonSet launches the ovn-kubernetes networking components for worker nodes.
spec:
  selector:
    matchLabels:
      app: ovnkube-node-dpu
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ovnkube-node-dpu
        name: ovnkube-node-dpu
        component: network
        type: infra
        kubernetes.io/os: "linux"
      {{- if not .Values.externalDHCP }}
      annotations:
        dpf.nvidia.com/ip-requests: |-
          [
            {
              "name": "vtep",
              "poolName": "{{ .Values.ipamPool }}",
              "poolType": "{{ .Values.ipamPoolType}}",
              "allocateIPWithIndex": {{ .Values.ipamVTEPIPIndex }}
            },
            {
              "name": "pf",
              "poolName": "{{ .Values.ipamPool }}",
              "poolType": "{{ .Values.ipamPoolType}}",
              "allocateIPWithIndex": {{ .Values.ipamPFIPIndex }}
            }
          ]
      {{- end }}
    spec:
      {{- if .Values.global.imagePullSecretName }}
      imagePullSecrets:
      - name: {{ .Values.global.imagePullSecretName }}
      {{- end }}
      priorityClassName: "system-cluster-critical"
      serviceAccountName: ovnkube-node
      hostNetwork: true
      dnsPolicy: Default
      {{- if eq (hasKey .Values.global "unprivilegedMode" | ternary .Values.global.unprivilegedMode false) false }}
      hostPID: true
      {{- end }}
      automountServiceAccountToken: false
      # DPU CNI provisioner
      initContainers:
      {{- if not .Values.externalDHCP }}
      - name: ipallocator
        image: {{ include "getDPUImage" . }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.global.image.pullPolicy }}
        command:
        - /ipallocator
        - allocator
        # Needs to always run so that later it can receive a signal to do a CMD DEL
        restartPolicy: Always
        securityContext:
          # Needs to run as root to ensure that it can access the NVIPAM socket
          runAsUser: 0
        readinessProbe:
          exec:
            command:
            - cat
            - /var/run/readyz
        # Startup probe is not really nessecary but it helps ensure that the file is written before the real app container
        # starts.
        startupProbe:
          exec:
            command:
            - cat
            - /var/run/readyz
        # We use preStop to deallocate the IP when the pod is deleted. Quoting the official docs:
        # PreStop is called immediately before a container is terminated due to an
        # API request or management event such as liveness/startup probe failure,
        # preemption, resource contention, etc. The handler is not called if the
        # container crashes or exits.
        lifecycle:
          preStop:
            exec:
              command:
              - /ipallocator
              - deallocator
        env:
        - name: IP_ALLOCATOR_REQUESTS
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['dpf.nvidia.com/ip-requests']
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        volumeMounts:
        - mountPath: /opt/cni/bin
          name: cni-bin-dir
          readOnly: true
        - mountPath: /var/lib/cni/nv-ipam
          name: nvipam-daemon-socket-dir
          readOnly: true
        - mountPath: /tmp/ips
          name: ips
        # Used for caching the result
        - mountPath: /var/lib/cni
          name: cni-cache
      {{- end }}
      - name: cniprovisioner
        image: {{ include "getDPUImage" . }}
        command: ["/cniprovisioner"]
        args:
        {{- if .Values.externalDHCP }}
        - external-ipam
        {{- else }}
        - internal-ipam
        {{- end }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.global.image.pullPolicy }}
        # Needs to always run because of DHCP server
        restartPolicy: Always
        # Ensures that DHCP server is up and running. This is for serving IP to the PF on the host.
        readinessProbe:
          exec:
            command:
            - cat
            - /var/run/readyz
        # Needed to ensure that the configuration finishes before the rest of the containers start
        startupProbe:
          exec:
            command:
            - cat
            - /var/run/readyz
          initialDelaySeconds: 30
        securityContext:
          privileged: true
          runAsUser: 0
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        {{- if .Values.externalDHCP }}
        # Needed so that systemctl can run inside the container
        - name: SYSTEMCTL_FORCE_BUS
          value: "1"
        # Needed so that systemctl called via netplan doesn't do noop actions
        - name: SYSTEMD_OFFLINE
          value: "0"
        # Needed so that udevadm called via systemctl called via netplan doesn't do noop actions. Although deprecated,
        # this is what it's in use. The new env variable SYSTEMD_IN_CHROOT doesn't work.
        - name: SYSTEMD_IGNORE_CHROOT
          value: "1"
        - name: GATEWAY_DISCOVERY_NETWORK
          value: {{ default "" .Values.gatewayDiscoveryNetwork | quote }}
        {{- else }}
        - name: VTEP_CIDR
          value: {{ default "" .Values.vtepCIDR | quote }}
        - name: OVN_MTU
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: mtu
        {{- end }}
        - name: HOST_CIDR
          value: {{ default "" .Values.hostCIDR | quote }}
        volumeMounts:
        {{- if .Values.externalDHCP }}
        # Needed so that we can write netplan config files
        - mountPath: /etc/netplan
          name: netplan
        # Needed so that netplan apply writes systemd networkd config files to host path
        - name: run-systemd
          mountPath: /run/systemd
        # Needed so that netplan apply can restart systemd services
        - name: systemd-dbus
          mountPath: /var/run/dbus/system_bus_socket
        # Needed so that netplan apply can run udevadm reload
        - mountPath: /run/udev
          name: run-udev
        # Needed so that netplan apply uses the MACAddressPolicy of the system instead of the image one
        # which leads to a conflicting MAC addresses across nodes
        - mountPath: /usr/lib/systemd/network
          name: usr-lib-systemd-network
        {{- else }}
        - mountPath: /tmp/ips
          name: ips
        {{- end }}
        - mountPath: /etc/init-output
          name: init-output
        - name: incluster
          mountPath: "/var/run/secrets/kubernetes.io/serviceaccount"
          readOnly: true
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs
      containers:
      # nb-ovsdb - v3
      - name: nb-ovsdb
        image: {{ include "getDPUImage" . }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.global.image.pullPolicy }}
        command: ["/root/ovnkube.sh", "local-nb-ovsdb"]
        securityContext:
          runAsUser: 0
          capabilities:
            add: ["NET_ADMIN"]
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # ovn db is stored in the pod in /etc/openvswitch
        # (or in /etc/ovn if OVN from new repository is used)
        # and on the host in /var/lib/openvswitch/
        - mountPath: /etc/openvswitch/
          name: host-etc-ovs
        - mountPath: /etc/ovn/
          name: host-var-lib-ovs
        - mountPath: /var/log/openvswitch/
          name: host-var-log-ovs
        - mountPath: /var/log/ovn/
          name: host-var-log-ovs
        - mountPath: /ovn-cert
          name: host-ovn-cert
          readOnly: true
        - mountPath: /var/run/ovn/
          name: host-var-run-ovs
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: OVN_LOGLEVEL_NB
          value: {{ default "-vconsole:info -vfile:info" .Values.nbLogLevel | quote }}
        - name: K8S_APISERVER
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: k8s_apiserver
        - name: OVN_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        readinessProbe:
          exec:
            command: ["/usr/bin/ovn-kube-util", "readiness-probe", "-t", "ovnnb-db"]
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
      # end of container
      # sb-ovsdb - v3
      - name: sb-ovsdb
        image: {{ include "getDPUImage" . }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.global.image.pullPolicy }}
        command: ["/root/ovnkube.sh", "local-sb-ovsdb"]
        securityContext:
          runAsUser: 0
          capabilities:
            add: ["NET_ADMIN"]
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # ovn db is stored in the pod in /etc/openvswitch
        # (or in /etc/ovn if OVN from new repository is used)
        # and on the host in /var/lib/openvswitch/
        - mountPath: /etc/openvswitch/
          name: host-etc-ovs
        - mountPath: /etc/ovn/
          name: host-var-lib-ovs
        - mountPath: /var/log/openvswitch/
          name: host-var-log-ovs
        - mountPath: /var/log/ovn/
          name: host-var-log-ovs
        - mountPath: /ovn-cert
          name: host-ovn-cert
          readOnly: true
        - mountPath: /var/run/ovn/
          name: host-var-run-ovs
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: OVN_LOGLEVEL_SB
          value: {{ default "-vconsole:info -vfile:info" .Values.sbLogLevel | quote }}
        - name: K8S_APISERVER
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: k8s_apiserver
        - name: OVN_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: OVN_SSL_ENABLE
          value: {{ include "isSslEnabled" . | quote }}
        readinessProbe:
          exec:
            command: ["/usr/bin/ovn-kube-util", "readiness-probe", "-t", "ovnsb-db"]
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
      # end of container
      # ovn-northd - v3
      - name: ovn-northd
        image: {{ include "getDPUImage" . }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.global.image.pullPolicy }}
        command: ["/root/ovnkube.sh", "run-ovn-northd"]
        securityContext:
          runAsUser: 0
          capabilities:
            add: ["SYS_NICE"]
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Run directories where we need to be able to access sockets
        - mountPath: /var/run/dbus/
          name: host-var-run-dbus
          readOnly: true
        - mountPath: /var/log/openvswitch/
          name: host-var-log-ovs
        - mountPath: /var/log/ovn/
          name: host-var-log-ovs
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs
        - mountPath: /var/run/ovn/
          name: host-var-run-ovs
        - mountPath: /ovn-cert
          name: host-ovn-cert
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: OVN_LOGLEVEL_NORTHD
          value: {{ default "-vconsole:info -vfile:info" .Values.northdLogLevel | quote }}
        - name: K8S_APISERVER
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: k8s_apiserver
        - name: OVN_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OVN_SSL_ENABLE
          value: {{ include "isSslEnabled" . | quote }}
        - name: OVN_NORTH
          value: "local"
        - name: OVN_SOUTH
          value: "local"
        readinessProbe:
          exec:
            command: ["/usr/bin/ovn-kube-util", "readiness-probe", "-t", "ovn-northd"]
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
      # end of container
      {{- if eq (hasKey .Values.global "enableCompactMode" | ternary .Values.global.enableCompactMode false) false }}
      - name: doca-ovnkube-controller
        image: {{ include "getDPUImage" . }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.global.image.pullPolicy }}
        command: ["/root/ovnkube.sh", "ovnkube-controller-with-node"]
        securityContext:
          runAsUser: 0
          {{- if eq (hasKey .Values.global "unprivilegedMode" | ternary .Values.global.unprivilegedMode false) false }}
          privileged: true
          {{- else }}
          capabilities:
            add:
            - NET_ADMIN
          {{- end }}
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/init-output
          name: init-output
        # Common mounts
        # for the iptables wrapper
        - mountPath: /host
          name: host-slash
          readOnly: true
        - mountPath: /var/lib/kubelet
          name: host-kubelet
          readOnly: true
        - mountPath: /host-kubernetes
          name: host-kubeconfig
          readOnly: true
        - mountPath: /var/run/dbus/
          name: host-var-run-dbus
          readOnly: true
        - mountPath: /var/log/ovn-kubernetes/
          name: host-var-log-ovnkube
          # We mount our socket here
        - mountPath: /var/run/ovn-kubernetes
          name: host-var-run-ovn-kubernetes
        # CNI related mounts which we take over
        - mountPath: /opt/cni/bin
          name: host-opt-cni-bin
        - mountPath: /etc/cni/net.d
          name: host-etc-cni-netd
        - mountPath: /var/run/netns
          name: host-netns
          mountPropagation: Bidirectional
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs
        - mountPath: /var/run/ovn/
          name: host-var-run-ovs
        - mountPath: /ovn-cert
          name: host-ovn-cert
          readOnly: true
        - mountPath: /etc/openvswitch/
          name: host-etc-ovs
          readOnly: true
        - mountPath: /etc/ovn/
          name: host-var-lib-ovs
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: tenant-cluster-access-secret
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_EGRESSSERVICE_ENABLE
          value: {{ default "" .Values.global.enableEgressService | quote }}
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: OVNKUBE_LOGLEVEL
          value: {{ default 4 .Values.ovnkubeNodeLogLevel | quote }}
        - name: OVNKUBE_LOGFILE_MAXSIZE
          value: {{ default 100 .Values.logfileMaxSize | quote }}
        - name: OVNKUBE_LOGFILE_MAXBACKUPS
          value: {{ default 5 .Values.logFileMaxBackups | quote }}
        - name: OVNKUBE_LOGFILE_MAXAGE
          value: {{ default 5 .Values.logFileMaxAge | quote }}
        - name: OVNKUBE_LIBOVSDB_CLIENT_LOGFILE
          value: {{ default "" .Values.global.libovsdbClientLogFile | quote }}
        - name: OVNKUBE_CONFIG_DURATION_ENABLE
          value: {{ default "" .Values.global.enableConfigDuration | quote }}
        - name: OVNKUBE_METRICS_SCALE_ENABLE
          value: {{ default "" .Values.global.enableMetricsScale | quote }}
        - name: OVN_GATEWAY_ROUTER_SUBNET
          value: {{ default "" .Values.global.ovnGatewayRouter | quote }}
        - name: OVN_NET_CIDR
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: net_cidr
        - name: OVN_SVC_CIDR
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: svc_cidr
        - name: K8S_APISERVER
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: k8s_apiserver
        - name: OVN_MTU
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: mtu
        - name: OVN_ROUTABLE_MTU
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: routable_mtu
              optional: true
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: OVN_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OVN_GATEWAY_MODE
          value: {{ default "shared" .Values.global.gatewayMode }}
        - name: OVN_GATEWAY_OPTS
          value: {{ default "" .Values.global.gatewayOpts | quote }}
        - name: OVN_HYBRID_OVERLAY_ENABLE
          value: {{ default "" .Values.global.enableHybridOverlay | quote }}
        - name: OVN_ADMIN_NETWORK_POLICY_ENABLE
          value: {{ default "" .Values.global.enableAdminNetworkPolicy | quote }}
        - name: OVN_EGRESSIP_ENABLE
          value: {{ default "" .Values.global.enableEgressIp | quote }}
        - name: OVN_EGRESSIP_HEALTHCHECK_PORT
          value: {{ default "" .Values.global.egressIpHealthCheckPort | quote }}
        - name: OVN_EGRESSFIREWALL_ENABLE
          value: {{ default "" .Values.global.enableEgressFirewall | quote }}
        - name: OVN_EGRESSQOS_ENABLE
          value: {{ default "" .Values.global.enableEgressQos | quote }}
        - name: OVN_HYBRID_OVERLAY_NET_CIDR
          value: {{ default "" .Values.global.hybridOverlayNetCidr | quote }}
        - name: OVN_DISABLE_SNAT_MULTIPLE_GWS
          value: {{ default "" .Values.global.disableSnatMultipleGws | quote }}
        - name: OVN_DISABLE_FORWARDING
          value: {{ default "" .Values.global.disableForwarding | quote }}
        - name: OVN_ENCAP_PORT
          value: {{ default 6081 .Values.global.encapPort | quote }}
        - name: OVN_DISABLE_PKT_MTU_CHECK
          value: {{ default "" .Values.global.disablePacketMtuCheck | quote }}
        - name: OVN_NETFLOW_TARGETS
          value: {{ default "" .Values.global.netFlowTargets | quote }}
        - name: OVN_SFLOW_TARGETS
          value: {{ default "" .Values.global.sflowTargets | quote }}
        - name: OVN_IPFIX_TARGETS
          value: {{ default "" .Values.global.ipfixTargets | quote }}
        - name: OVN_IPFIX_SAMPLING
          value: {{ default "" .Values.global.ipfixSampling | quote }}
        - name: OVN_IPFIX_CACHE_MAX_FLOWS
          value: {{ default "" .Values.global.ipfixCacheMaxFlows | quote }}
        - name: OVN_IPFIX_CACHE_ACTIVE_TIMEOUT
          value: {{ default "" .Values.global.ipfixCacheActiveTimeout | quote }}
        - name: OVN_V4_JOIN_SUBNET
          value: {{ default "" .Values.global.v4JoinSubnet | quote }}
        - name: OVN_V6_JOIN_SUBNET
          value: {{ default "" .Values.global.v6JoinSubnet | quote }}
        - name: OVN_V4_MASQUERADE_SUBNET
          value: {{ default "" .Values.global.v4MasqueradeSubnet | quote }}
        - name: OVN_V6_MASQUERADE_SUBNET
          value: {{ default "" .Values.global.v6MasqueradeSubnet | quote }}
        - name: OVN_MULTICAST_ENABLE
          value: {{ default "" .Values.global.enableMulticast | quote }}
        - name: OVN_UNPRIVILEGED_MODE
          value: {{ include "isUnprivilegedMode" . | quote }}
        - name: OVN_EX_GW_NETWORK_INTERFACE
          value: {{ default "" .Values.global.extGatewayNetworkInterface | quote }}
        - name: OVN_SSL_ENABLE
          value: {{ include "isSslEnabled" . | quote }}
        - name: OVN_DISABLE_OVN_IFACE_ID_VER
          value: {{ hasKey .Values.global "disableIfaceIdVer" | ternary .Values.global.disableIfaceIdVer false | quote }}
        - name: OVN_REMOTE_PROBE_INTERVAL
          value: {{ default 100000 .Values.global.remoteProbeInterval | quote }}
        - name: OVN_MONITOR_ALL
          value: {{ default "" .Values.global.monitorAll | quote }}
        - name: OVN_OFCTRL_WAIT_BEFORE_CLEAR
          value: {{ default "" .Values.global.ofctrlWaitBeforeClear | quote }}
        - name: OVN_ENABLE_LFLOW_CACHE
          value: {{ hasKey .Values.global "enableLFlowCache" | ternary .Values.global.enableLFlowCache true | quote }}
        - name: OVN_LFLOW_CACHE_LIMIT
          value: {{ default "" .Values.global.lFlowCacheLimit | quote }}
        - name: OVN_LFLOW_CACHE_LIMIT_KB
          value: {{ default "" .Values.global.lFlowCacheLimitKb | quote }}
        - name: OVN_MULTI_NETWORK_ENABLE
          value: {{ hasKey .Values.global "enableMultiNetwork" | ternary .Values.global.enableMultiNetwork false | quote }}
        - name: OVN_EMPTY_LB_EVENTS
          value: {{ default "" .Values.global.emptyLbEvents | quote }}
        - name: OVN_ACL_LOGGING_RATE_LIMIT
          value: {{ default 20 .Values.global.aclLoggingRateLimit | quote }}
        - name: OVN_STATELESS_NETPOL_ENABLE
          value: {{ hasKey .Values.global "enableStatelessNetworkPolicy" | ternary .Values.global.enableStatelessNetworkPolicy false | quote }}
        - name: OVN_HOST_NETWORK_NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: host_network_namespace
        - name: OVN_NORTH
          value: "local"
        - name: OVN_SOUTH
          value: "local"
        - name: OVN_ENABLE_INTERCONNECT
          value: {{ hasKey .Values.global "enableInterconnect" | ternary .Values.global.enableInterconnect false | quote }}
        - name: OVN_ENABLE_MULTI_EXTERNAL_GATEWAY
          value: {{ hasKey .Values.global "enableMultiExternalGateway" | ternary .Values.global.enableMultiExternalGateway false | quote }}
        - name: OVN_ENABLE_OVNKUBE_IDENTITY
          value: {{ hasKey .Values.global "enableOvnKubeIdentity" | ternary .Values.global.enableOvnKubeIdentity true | quote }}
        - name: OVN_ENABLE_SVC_TEMPLATE_SUPPORT
          value: {{ hasKey .Values.global "enableSvcTemplate" | ternary .Values.global.enableSvcTemplate true | quote }}
        - name: OVN_ENABLE_DNSNAMERESOLVER
          value: {{ hasKey .Values.global "enableDNSNameResolver" | ternary .Values.global.enableDNSNameResolver false | quote }}
        - name: OVN_NOHOSTSUBNET_LABEL
          value: {{ default "k8s.ovn.org/ovn-managed=false" .Values.global.noHostSubnetLabel | quote }}
        - name: OVNKUBE_NODE_MODE
          value: "dpu"
        readinessProbe:
          exec:
            command: ["/usr/bin/ovn-kube-util", "readiness-probe", "-t", "ovnkube-node"]
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
      - name: ovn-controller
        image: {{ include "getDPUImage" . }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.global.image.pullPolicy }}
        command: ["/root/ovnkube.sh", "ovn-controller"]
        securityContext:
          runAsUser: 0
          capabilities:
            add: ["SYS_NICE"]
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/dbus/
          name: host-var-run-dbus
          readOnly: true
        - mountPath: /var/log/openvswitch/
          name: host-var-log-ovs
        - mountPath: /var/log/ovn/
          name: host-var-log-ovs
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs
        - mountPath: /var/run/ovn/
          name: host-var-run-ovs
        - mountPath: /ovn-cert
          name: host-ovn-cert
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: OVN_LOGLEVEL_CONTROLLER
          value: {{ default "-vconsole:info" .Values.ovnControllerLogLevel | quote }}
        - name: K8S_APISERVER
          valueFrom:
            configMapKeyRef:
              name: ovn-config
              key: k8s_apiserver
        - name: OVN_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OVN_SSL_ENABLE
          value: {{ default "" .Values.global.enableSsl | quote }}
        - name: OVN_NORTH
          value: "local"
        - name: OVN_SOUTH
          value: "local"
        readinessProbe:
          exec:
            command: ["/usr/bin/ovn-kube-util", "readiness-probe", "-t", "ovn-controller"]
          initialDelaySeconds: 30
          timeoutSeconds: 30
          periodSeconds: 60
      {{- end }}
        # ovs-metrics-exporter - v3
      - name: ovs-metrics-exporter
        image: {{ include "getDPUImage" . }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.global.image.pullPolicy }}
        command: ["/root/ovnkube.sh", "ovs-metrics"]
        securityContext:
          runAsUser: 0
          capabilities:
            add: ["NET_ADMIN"]
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/dbus/
          name: host-var-run-dbus
          readOnly: true
        - mountPath: /var/log/openvswitch/
          name: host-var-log-ovs
        - mountPath: /var/run/openvswitch/
          name: host-var-run-ovs
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: OVN_DAEMONSET_VERSION
          value: "1.0.0"
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        # end of container
      nodeSelector:
        kubernetes.io/os: "linux"
      volumes:
      # CNI provisioner
      {{- if .Values.externalDHCP }}
      - name: netplan
        hostPath:
          path: /etc/netplan
          type: Directory
      - name: run-systemd
        hostPath:
          path: /run/systemd
      - name: systemd-dbus
        hostPath:
          path: /var/run/dbus/system_bus_socket
      - name: run-udev
        hostPath:
          path: /run/udev
      - name: usr-lib-systemd-network
        hostPath:
          path: /usr/lib/systemd/network
      {{- else }}
      - name: ips
        emptyDir: {}
      - name: cni-bin-dir
        hostPath:
          path: /opt/cni/bin
          type: Directory
      - name: nvipam-daemon-socket-dir
        hostPath:
          path: /var/lib/cni/nv-ipam
          type: Directory
      - name: cni-cache
        emptyDir: {}
      {{- end }}
      - name: init-output
        emptyDir: {}
      # Common volumes
      - name: host-var-run-dbus
        hostPath:
          path: /var/run/dbus
      - name: host-kubeconfig
        hostPath:
          path: /etc/kubernetes/
      - name: host-kubelet
        hostPath:
          path: /var/lib/kubelet
      - name: host-var-log-ovnkube
        hostPath:
          path: /var/log/ovn-kubernetes
      - name: host-var-run-ovn-kubernetes
        hostPath:
          path: /var/run/ovn-kubernetes
      - name: host-opt-cni-bin
        hostPath:
          path: /opt/cni/bin
      - name: host-etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
      - name: host-slash
        hostPath:
          path: /
      - name: host-netns
        hostPath:
          path: /var/run/netns
      # non DPU related volumes
      - name: host-var-log-ovs
        hostPath:
          path: /var/log/openvswitch
      - name: host-run-ovs
        hostPath:
          path: /run/openvswitch
      - name: host-var-run-ovs
        hostPath:
          path: /var/run/openvswitch
      - name: host-ovn-cert
        hostPath:
          path: /etc/ovn
          type: DirectoryOrCreate
      - name: host-var-lib-ovs
        hostPath:
          path: /var/lib/openvswitch
      - name: host-etc-ovs
        hostPath:
          path: /etc/openvswitch
      - name: tenant-cluster-access-secret
        secret:
          defaultMode: 420
          items:
          - key: KUBERNETES_CA_DATA
            path: ca.crt
          - key: TOKEN_FILE
            path: token
          secretName: {{ default "" .Values.kubernetesSecretName }}
      - name: incluster
        projected:
          sources:
          - secret:
              name: ovnkube-dpucniprovisioner-token
              items:
              - key: ca.crt
                path: ca.crt
              - key: token
                path: token
      tolerations:
      - operator: "Exists"
