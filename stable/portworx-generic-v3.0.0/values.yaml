# spectrocloud.com/enabled-presets: License Models:px-essentials
pack:
  namespace: kube-system
  content:
    images:
      - image: portworx/oci-monitor:3.0.0
      - image: portworx/px-operator:23.5.1

charts:
  px-operator:
    namespace: kube-system

  portworx-generic:
    namespace: kube-system

    license:
      # Valid options for "type" are: essentials, saas, enterprise
      # If you want to deploy the PX Enterprise Trial version, or need manual offline activation,
      # select the "enterprise" type and set "activateLicense" to false.
      type: essentials
      # The next block only gets used if the type is set to "essentials"
      essentials:
        # Base64-decoded value of the px-essen-user-id value in the px-essential secret
        # Find your Essential Entitlement ID at https://central.portworx.com/profile
        userId: 1234abcd-12ab-12ab-12ab-123456abcdef
        # Base64-decoded value of the px-osb-endpoint value in the px-essential secret
        # Leave at the default value unless there are special circumstances
        endpoint: https://pxessentials.portworx.com/osb/billing/v1/register
      # The next block only gets used if the type is set to "saas"
      saas:
        key: <PAY-AS-YOU-GO-KEY>
      # The next block only gets used if the type is set to "enterprise"
      enterprise:
        activateLicense: true
        activationId: <Activation ID>
        # customLicenseServer:
        #   url: http://hostname:7070/fne/bin/capability
        #   importUnknownCa: true
        #   licenseBorrowInterval: 1w15m
        #   addFeatures:
        #   - feature1
        #   - feature2

    storageCluster:
      # When autoGenerateName is true, a name of type "px-cluster-1234abcd-12ab-12ab-12ab-123456abcdef" is generated and the "name" field is ignored
      autoGenerateName: false
      name: "px-{{.spectro.system.cluster.name}}"
      # annotations:
      #   If you need additional annotations, specify them here
      spec: {}
        # Select a preset from the pane on the right, or use the Portworx Spec Builder to define a custom configuration and
        # then paste that spec section here. (Spec Builder: https://central.portworx.com/specGen/wizard)
        # ### Example spec
        # image: portworx/oci-monitor:3.0.0
        # imagePullPolicy: Always
        # deleteStrategy:
        #   type: UninstallAndWipe
        # kvdb:
        #   internal: true
        #   # endpoints:
        #   # - etcd:https://etcd.company.domain:2379
        #   # authSecret: px-kvdb-auth
        # storage:
        #   useAll: true
        #   journalDevice: auto
        #   kvdbDevice: /dev/sdb
        # network:
        #   dataInterface: eth0
        #   mgmtInterface: eth1
        # secretsProvider: k8s
        # stork:
        #   enabled: true
        #   args:
        #     webhook-controller: "true"
        # autopilot:
        #   enabled: true
        #   providers:
        #   - name: default
        #     params:
        #       url: http://prometheus-operator-prometheus.monitoring.svc.cluster.local:9090
        #     type: prometheus
        # runtimeOptions:
        #   default-io-profile: "6"
        # csi:
        #   enabled: true
        # monitoring:
        #   telemetry:
        #       enabled: false
        #   prometheus:
        #     enabled: false
        #     exportMetrics: true

    # To automatically create the px-vsphere-secret for VMware, uncomment this section
    # vsphereSecret:
    #   user: ""
    #   password: ""

    # To automatically create the px-azure secret for Azure, uncomment this section
    # azureSecret:
    #   tenantId:
    #   clientId:
    #   clientSecret: 

    storageClass:
      name: spectro-storage-class
      isDefaultStorageClass: true
      # annotations:
      #   If you need additional annotations, specify them here
      allowVolumeExpansion: true
      # Delete or Retain
      reclaimPolicy: Delete
      # WaitForFirstConsumer or Immediate
      volumeBindingMode: WaitForFirstConsumer
      parameters:
        repl: "2"
        priority_io: "high"
        sharedv4: true
        # sharedv4_svc_type: "ClusterIP"
        # stork.libopenstorage.org/preferRemoteNodeOnly: "false"
        # Add additional parameters as needed (https://docs.portworx.com/portworx-install-with-kubernetes/storage-operations/create-pvcs/dynamic-provisioning/)

    # External kvdb related config, only used if storageCluster.spec.kvdb.internal = false
    externalKvdb:
      useCertsForSSL: false
      # cacert: |
      #   -----BEGIN CERTIFICATE-----
      #   < KEY DATA >
      #   -----END CERTIFICATE-----
      # key: |
      #   -----BEGIN RSA PRIVATE KEY-----
      #   < KEY DATA >
      #   -----END RSA PRIVATE KEY-----
      # cert: |
      #   -----BEGIN CERTIFICATE-----
      #   < KEY DATA >
      #   -----END CERTIFICATE-----
