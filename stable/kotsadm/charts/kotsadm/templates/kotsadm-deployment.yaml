apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "kotsadm.labels" . | nindent 4 }}
  name: kotsadm
spec:
  selector:
    matchLabels:
      app: kotsadm
  strategy: {}
  template:
    metadata:
      annotations:
        backup.velero.io/backup-volumes: backup
        pre.hook.backup.velero.io/command: '["/backup.sh"]'
        pre.hook.backup.velero.io/timeout: 10m
      creationTimestamp: null
      labels:
        app: kotsadm
        {{- include "kotsadm.labels" . | nindent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
              - key: kubernetes.io/arch
                operator: NotIn
                values:
                - arm64
      containers:
      - env:
        - name: SHARED_PASSWORD_BCRYPT
          valueFrom:
            secretKeyRef:
              key: passwordBcrypt
              name: kotsadm-password
        - name: AUTO_CREATE_CLUSTER_TOKEN
          valueFrom:
            secretKeyRef:
              key: kotsadm-cluster-token
              name: kotsadm-cluster-token
        - name: SESSION_KEY
          valueFrom:
            secretKeyRef:
              key: key
              name: kotsadm-session
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kotsadm-postgres
        - name: POSTGRES_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: kotsadm-postgres
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_OWNER_KIND
          value: deployment
        - name: API_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              key: encryptionKey
              name: kotsadm-encryption
        - name: API_ENDPOINT
          value: http://kotsadm.{{ .Release.Namespace }}.svc.cluster.local:3000
        - name: API_ADVERTISE_ENDPOINT
          value: http://localhost:8800
        - name: S3_ENDPOINT
          value: http://kotsadm-minio:9000
        - name: S3_BUCKET_NAME
          value: kotsadm
        - name: S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: accesskey
              name: kotsadm-minio
        - name: S3_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: secretkey
              name: kotsadm-minio
        - name: S3_BUCKET_ENDPOINT
          value: "true"
        - name: HTTP_PROXY
        - name: HTTPS_PROXY
        - name: NO_PROXY
          value: kotsadm-postgres,kotsadm-minio,kotsadm-api-node
        image: kotsadm/kotsadm:{{ .Values.kotsadm.version }}
        imagePullPolicy: IfNotPresent
        name: kotsadm
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /backup
          name: backup
        - mountPath: /tmp
          name: tmp
      initContainers:
      - args:
        - plan
        env:
        - name: SCHEMAHERO_DRIVER
          value: postgres
        - name: SCHEMAHERO_SPEC_FILE
          value: /tables
        - name: SCHEMAHERO_OUT
          value: /migrations/plan.yaml
        - name: SCHEMAHERO_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: kotsadm-postgres
        image: kotsadm/kotsadm-migrations:{{ .Values.kotsadm.version }}
        imagePullPolicy: IfNotPresent
        name: schemahero-plan
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 50Mi
        volumeMounts:
        - mountPath: /migrations
          name: migrations
      - args:
        - apply
        env:
        - name: SCHEMAHERO_DRIVER
          value: postgres
        - name: SCHEMAHERO_DDL
          value: /migrations/plan.yaml
        - name: SCHEMAHERO_URI
          valueFrom:
            secretKeyRef:
              key: uri
              name: kotsadm-postgres
        image: kotsadm/kotsadm-migrations:{{ .Values.kotsadm.version }}
        imagePullPolicy: IfNotPresent
        name: schemahero-apply
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 50Mi
        volumeMounts:
        - mountPath: /migrations
          name: migrations
      - command:
        - /restore-db.sh
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: kotsadm-postgres
        image: kotsadm/kotsadm:{{ .Values.kotsadm.version }}
        imagePullPolicy: IfNotPresent
        name: restore-db
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /backup
          name: backup
        - mountPath: /tmp
          name: tmp
      - command:
        - /restore-s3.sh
        env:
        - name: S3_ENDPOINT
          value: http://kotsadm-minio:9000
        - name: S3_BUCKET_NAME
          value: kotsadm
        - name: S3_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: accesskey
              name: kotsadm-minio
        - name: S3_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: secretkey
              name: kotsadm-minio
        - name: S3_BUCKET_ENDPOINT
          value: "true"
        image: kotsadm/kotsadm:{{ .Values.kotsadm.version }}
        imagePullPolicy: IfNotPresent
        name: restore-s3
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /backup
          name: backup
      restartPolicy: Always
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      serviceAccountName: kotsadm
      volumes:
      - emptyDir:
          medium: Memory
        name: migrations
      - emptyDir: {}
        name: backup
      - emptyDir: {}
        name: tmp
status: {}
