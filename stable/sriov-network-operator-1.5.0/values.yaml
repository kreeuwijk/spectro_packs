pack:
  content:
    images: []
  namespace: sriov-network-operator
  namespaceLabels:
    "sriov-network-operator": "pod-security.kubernetes.io/enforce=privileged,pod-security.kubernetes.io/enforce-version=v{{ .spectro.system.kubernetes.version | substr 0 4 }}"

charts:
  sriov-network-operator-chart:
    nameOverride: sriov-network-operator
    fullnameOverride: sriov-network-operator
    operator:
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      nodeSelector: {}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                  - key: "node-role.kubernetes.io/master"
                    operator: In
                    values: [""]
            - weight: 1
              preference:
                matchExpressions:
                  - key: "node-role.kubernetes.io/control-plane"
                    operator: In
                    values: [""]
      nameOverride: "sriov-network-operator"
      fullnameOverride: "sriov-network-operator"
      resourcePrefix: "spectro"
      cniBinPath: "/opt/cni/bin"
      clusterType: "kubernetes"
      # minimal amount of time (in minutes) the operator will wait before removing
      # stale SriovNetworkNodeState objects (objects that doesn't match node with the daemon)
      # "0" means no extra delay, in this case the CR will be removed by the next reconcilation cycle (may take up to 5 minutes)
      staleNodeStateCleanupDelayMinutes: "30"
      metricsExporter:
        port: "9110"
        certificates:
          secretName: "metrics-exporter-cert"
        prometheusOperator:
          enabled: false
          serviceAccount: "prometheus-k8s"
          namespace: "monitoring"
          deployRules: false
      admissionControllers:
        enabled: true
        certificates:
          secretNames:
            operator: "operator-webhook-cert"
            injector: "network-resources-injector-cert"
          certManager:
            # When enabled, makes use of certificates managed by cert-manager.
            enabled: true
            # When enabled, certificates are generated via cert-manager and then name will match the name of the secrets
            # defined above
            generateSelfSigned: true
          # If not specified, no secret is created and secrets with the names defined above are expected to exist in the
          # cluster. In that case, the ca.crt must be base64 encoded twice since it ends up being an env variable.
          custom:
            enabled: false
            #   operator:
            #     caCrt: |
            #       -----BEGIN CERTIFICATE-----
            #       MIIMIICLDCCAdKgAwIBAgIBADAKBggqhkjOPQQDAjB9MQswCQYDVQQGEwJCRTEPMA0G
            #       ...
            #       -----END CERTIFICATE-----
            #     tlsCrt: |
            #       -----BEGIN CERTIFICATE-----
            #       MIIMIICLDCCAdKgAwIBAgIBADAKBggqhkjOPQQDAjB9MQswCQYDVQQGEwJCRTEPMA0G
            #       ...
            #       -----END CERTIFICATE-----
            #     tlsKey: |
            #       -----BEGIN EC PRIVATE KEY-----
            #       MHcl4wOuDwKQa+upc8GftXE2C//4mKANBC6It01gUaTIpo=
            #       ...
            #      -----END EC PRIVATE KEY-----
            #   injector:
            #     caCrt: |
            #       -----BEGIN CERTIFICATE-----
            #       MIIMIICLDCCAdKgAwIBAgIBADAKBggqhkjOPQQDAjB9MQswCQYDVQQGEwJCRTEPMA0G
            #       ...
            #       -----END CERTIFICATE-----
            #     tlsCrt: |
            #       -----BEGIN CERTIFICATE-----
            #       MIIMIICLDCCAdKgAwIBAgIBADAKBggqhkjOPQQDAjB9MQswCQYDVQQGEwJCRTEPMA0G
            #       ...
            #       -----END CERTIFICATE-----
            #     tlsKey: |
            #       -----BEGIN EC PRIVATE KEY-----
            #       MHcl4wOuDwKQa+upc8GftXE2C//4mKANBC6It01gUaTIpo=
            #       ...
            #      -----END EC PRIVATE KEY-----
    sriovOperatorConfig:
      # deploy sriovOperatorConfig CR with the below values
      deploy: true
      # node selectors for sriov-network-config-daemon
      configDaemonNodeSelector: {}
      # log level for both operator and sriov-network-config-daemon
      logLevel: 2
      # disable node draining when configuring SR-IOV, set to true in case of a single node
      # cluster or any other justifiable reason
      disableDrain: false
      # Optionally disable plugins (Currently only `mellanox` plugin can be disabled)
      disablePlugins: []
      # sriov-network-config-daemon configuration mode. either "daemon" or "systemd"
      configurationMode: daemon
      # feature gates to enable/disable
      featureGates: {}
    # Example for supportedExtraNICs values ['MyNIC: "8086 1521 1520"']
    supportedExtraNICs: []
    # Image URIs for sriov-network-operator components
    images:
      operator: ghcr.io/k8snetworkplumbingwg/sriov-network-operator:v1.5.0
      sriovConfigDaemon: ghcr.io/k8snetworkplumbingwg/sriov-network-operator-config-daemon:v1.5.0
      sriovCni: ghcr.io/k8snetworkplumbingwg/sriov-cni:v2.9.0
      ibSriovCni: ghcr.io/k8snetworkplumbingwg/ib-sriov-cni:v1.2.0
      ovsCni: ghcr.io/k8snetworkplumbingwg/ovs-cni-plugin:v0.38.0
      rdmaCni: ghcr.io/k8snetworkplumbingwg/rdma-cni:v1.2.1
      sriovDevicePlugin: ghcr.io/k8snetworkplumbingwg/sriov-network-device-plugin:v3.9.0
      resourcesInjector: ghcr.io/k8snetworkplumbingwg/network-resources-injector:v1.7.1
      webhook: ghcr.io/k8snetworkplumbingwg/sriov-network-operator-webhook:v1.5.0
      metricsExporter: ghcr.io/k8snetworkplumbingwg/sriov-network-metrics-exporter:v1.1.1
      metricsExporterKubeRbacProxy: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
    imagePullSecrets: []
    extraDeploy: []
