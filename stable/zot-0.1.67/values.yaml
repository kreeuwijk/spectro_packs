pack:
  namespace: zot-system
  releaseNameOverride: zot
  content:
    layer: core
    images:
      - image: us-docker.pkg.dev/palette-images/edge/ghcr.io/project-zot/zot:v2.1.2

charts:
  zot:
    # Default values for zot.
    # This is a YAML-formatted file.
    # Declare variables to be passed into your templates.
    replicaCount: 1
    image:
      repository: us-docker.pkg.dev/palette-images/edge/ghcr.io/project-zot/zot
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "v2.1.2"
    # Defaults to the release namespace if not specified
    namespace: ""
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: { }
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""
    service:
      type: NodePort
      port: 5000
      nodePort: 30003  # Set to a specific port if type is NodePort
      # Annotations to add to the service
      annotations: { }
      # Set to a static IP if a static IP is desired, only works when
      # type: ClusterIP
      clusterIP: null
    # Enabling this will publicly expose your zot server
    # Only enable this if you have security enabled on your cluster
    ingress:
      enabled: false
      annotations: { }
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # If using nginx, disable body limits and increase read and write timeouts
      # nginx.ingress.kubernetes.io/proxy-body-size: "0"
      # nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
      # nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
      className: "nginx"
      pathtype: ImplementationSpecific
      hosts:
        - host: chart-example.local
          paths:
            - path: /
      tls: [ ]
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local
    # By default, Kubernetes HTTP probes use HTTP 'scheme'. So if TLS is enabled
    # in configuration, to prevent failures, the scheme must be set to 'HTTPS'.
    httpGet:
      scheme: HTTPS

    tls:
      auto:
        commonName: "{{.spectro.system.cluster.kubevip}}"
      custom:
        enabled: false
        cert: "" # Base64 encoded certificate
        key: "" # Base64 encoded private key
        ca: "" # Base64 encoded CA certificate
    
    registry:
      password: ""
    
    # If mountConfig is true the configMap named $CHART_RELEASE-config is mounted
    # on the pod's '/etc/zot' directory
    mountConfig: true
    configFiles:
      config.yaml: |
        http:
          compat: ["docker2s2"]
          address: 0.0.0.0
          auth:
            htpasswd:
              path: /secret/htpasswd
          port: 5000
          tls:
            cert: /secret/tlsCert
            key: /secret/tlsKey
          accessControl:
            repositories:
              "**":
                policies:
                  - users:
                      - user
                    actions:
                      - read
                defaultPolicy: []
            adminPolicy:
              users:
                - admin
              actions:
                - read
                - create
                - update
                - delete
        log:
          level: debug
        storage:
          rootDirectory: "/var/lib/registry"
          # gc: true
          # gcDelay: "1h"
          # gcInterval: "24h"
        extensions:
          ui:
            enable: true
          search:
            enable: true
            #cve:
            #  updateInterval: 2h

    # externalSecrets allows to mount external (meaning not managed by this chart)
    # Kubernetes secrets within the Zot container.
    # The secret is identified by its name (property "secretName") and should be
    # present in the same namespace. The property "mountPath" specifies the path
    # within the container filesystem where the secret is mounted.
    #
    # Below is an example:
    #
    #  externalSecrets:
    #  - secretName: "secret1"
    #    mountPath: "/secrets/s1"
    #  - secretName: "secret2"
    #    mountPath: "/secrets/s2"
    externalSecrets: [ ]
    # If mountSecret is true, the Secret named $CHART_RELEASE-secret is mounted on
    # the pod's '/secret' directory (it is used to keep files with passwords, like
    # a `htpasswd` file)
    mountSecret: true
        
    # If secretFiles does not exist the user is in charge of managing it, again, if
    # you want to manage it the value has to be added empty to avoid using this one
    secretFiles:
      tlsCert: |
      tlsKey: |
    
    # If persistence is 'true' the service uses a persistentVolumeClaim to mount a
    # volume for zot on '/var/lib/registry'; by default the pvc used is named
    # '$CHART_RELEASE-pvc', but the name can be changed below
    persistence: true
    
    # PVC data, only used if persistence is 'true'
    pvc:
      # Make the chart create the PVC, this option is used with storageClasses that
      # can create volumes dynamically, if that is not the case is better to do it
      # manually and set create to false
      create: true
      # Name of the PVC to use or create if persistence is enabled, if not set the
      # value '$CHART_RELEASE-pvc' is used
      name: null
      # Volume access mode, if using more than one replica we need
      accessMode: "ReadWriteMany"
      # Size of the volume requested
      storage: 60Gi
      # Name of the storage class to use if it is different than the default one
      storageClassName: null
    # List of environment variables to set on the container
    env:
    # - name: "TEST"
    #  value: "ME"
    # - name: SECRET_NAME
    #  valueFrom:
    #    secretKeyRef:
    #      name: mysecret
    #      key: username
    
    # Extra Volume Mounts
    extraVolumeMounts: [ ]
    # - name: data
    #   mountPath: /var/lib/registry
    
    # Extra Volumes
    extraVolumes: [ ]
    # - name: data
    #   emptyDir: {}
    
    # Deployment strategy type
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    
    # Extra args to pass to the deployment's container
    extraArgs: ["serve", "/etc/zot/config.yaml"]
    podAnnotations: { }
    podLabels: { }
    deploymentAnnotations: { }
    priorityClassName: ""
    dnsConfig: { }
    dnsPolicy: "ClusterFirst"
    # Metrics configuration
    # NOTE: need enable metric extension in config.json
    metrics:
      # Start a prometheus exporter
      enabled: false
      # Prometheus Operator ServiceMonitor configuration
      serviceMonitor:
        # Start a ServiceMonitor for Prometheus Operator
        enabled: false
        # Specify the interval at which metrics should be scraped
        interval: "30s"
        # Specify the path to scrape metrics from
        path: "/metrics"
