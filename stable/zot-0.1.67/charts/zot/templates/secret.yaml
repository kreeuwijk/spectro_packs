{{- if and .Values.mountSecret .Values.secretFiles }}
{{- $ca := genCA "zot-registry" 365 }}
{{- $cn := (required "The \"tls.auto.commonName\" is required!" .Values.tls.auto.commonName) }}
{{- $cert := dict }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-secret
  namespace: {{ .Values.namespace | default .Release.Namespace }}
type: Opaque
data:
{{- range $key, $val := .Values.secretFiles }}
  {{- if $val }}  # Only include non-empty values
  {{ $key }}: {{ $val | b64enc }}
  {{- end }}
{{- end }}
  registryPassword: {{ .Values.registry.password | b64enc | quote }}
  htpasswd: {{ htpasswd "admin" .Values.registry.password | b64enc | quote }}
  {{- if .Values.tls.custom.enabled }}
  tlsCert: {{ .Values.tls.custom.cert | quote }}
  tlsKey: {{ .Values.tls.custom.key | quote }}
  caCrt: {{ .Values.tls.custom.ca | quote }}
  {{- else }}
  {{- /* Generate certificates automatically */ -}}
  {{- if regexMatch `^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$` $cn }}
  {{- $cert := genSignedCert $cn (list $cn) nil 365 $ca }}
  tlsCert: {{ $cert.Cert | b64enc | quote }}
  tlsKey: {{ $cert.Key | b64enc | quote }}
  caCrt: {{ $ca.Cert | b64enc | quote }}
  {{- else }}
  {{- $cert := genSignedCert $cn nil (list $cn) 365 $ca }}
  tlsCert: {{ $cert.Cert | b64enc | quote }}
  tlsKey: {{ $cert.Key | b64enc | quote }}
  caCrt: {{ $ca.Cert | b64enc | quote }}
  {{- end }}
  {{- end }}
{{- end }}